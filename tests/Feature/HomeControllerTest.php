<?php

namespace Tests\Feature;

use App\Http\Controllers\HomeController;
use App\Providers\Computer;
use App\Providers\Laptop;
use App\Providers\Developer;
use Tests\TestCase;
use Illuminate\Foundation\Testing\WithFaker;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Mockery as m;
use App\Http\Controllers\Home;
use Illuminate\Http\Request;

use App\Repositories\User\UserRepository;

class HomeControllerTest extends TestCase
{
    /**
     * A basic test example.
     *
     * @return void
     */
    protected $user;

    public function setUp(){
        parent::setUp();

        $this->user = m::mock(UserRepository::class);

    }
    public function tearDown()
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        m::close();
    }

    public function testHomeIndexNoServiceContainer()
    {
        $this->user->shouldReceive('queryData')
            ->once()
            ->andReturn([['name'=>'Tom'], ['name'=>'alex']]);

        $controller = new HomeController($this->user);
        $response = $controller->index(new Request());

        // assert something ....
    }

    public function testHomeIndexWithServiceContainer()
    {
        $this->user->shouldReceive('queryData')
            ->once()
            ->andReturn([['name'=>'Tom'], ['name'=>'alex']]);

        $this->app->instance('App\Repositories\User\UserRepository',$this->user);

        $response = $this->get('/home');

        // assert something ....
    }
}
